generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model board_store {
  id         Int      @id @default(autoincrement())
  board_id   Int
  pin_id     Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  boards     boards   @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "board_store_ibfk_1")
  pins       pins     @relation(fields: [pin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "board_store_ibfk_2")

  @@index([board_id], map: "board_id")
  @@index([pin_id], map: "pin_id")
}

model boards {
  id              Int           @id @default(autoincrement())
  user_id         Int
  title           String?       @db.VarChar(500)
  cover_image_url String?       @db.VarChar(2000)
  intro           String?       @db.Text
  created_at      DateTime      @default(now()) @db.Timestamp(0)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boards_ibfk_1")
  board_store     board_store[]

  @@index([user_id], map: "user_id")
}

model comment_like {
  id         Int      @id @default(autoincrement())
  comment_id Int
  user_id    Int
  isLike     Boolean
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  comments   comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_like_ibfk_1")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_like_ibfk_2")

  @@index([comment_id], map: "comment_id")
  @@index([user_id], map: "user_id")
}

model comments {
  id             Int            @id @default(autoincrement())
  pin_id         Int
  content        String         @db.VarChar(500)
  user_id        Int
  parent_id      Int
  created_at     DateTime       @default(now()) @db.Timestamp(0)
  updated_at     DateTime       @default(now()) @db.Timestamp(0)
  comments       comments       @relation("commentsTocomments_parent_id", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_3")
  pins           pins           @relation(fields: [pin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_1")
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_2")
  comment_like   comment_like[]
  other_comments comments[]     @relation("commentsTocomments_parent_id")

  @@index([parent_id], map: "parent_id")
  @@index([pin_id], map: "pin_id")
  @@index([user_id], map: "user_id")
}

model followings {
  id                                  Int   @id @default(autoincrement())
  followee_id                         Int
  follower_id                         Int
  users_followings_followee_idTousers users @relation("followings_followee_idTousers", fields: [followee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "followings_ibfk_1")
  users_followings_follower_idTousers users @relation("followings_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "followings_ibfk_2")

  @@index([followee_id], map: "followee_id")
  @@index([follower_id], map: "follower_id")
}

model pin_store {
  id      Int   @id @default(autoincrement())
  user_id Int
  pin_id  Int
  pins    pins  @relation(fields: [pin_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pin_store_ibfk_2")
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pin_store_ibfk_1")

  @@index([pin_id], map: "pin_id")
  @@index([user_id], map: "user_id")
}

model pins {
  id          Int           @id @default(autoincrement())
  user_id     Int
  title       String?       @db.VarChar(500)
  intro       String?       @db.Text
  alt         String?       @db.VarChar(500)
  category    String        @db.VarChar(500)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pins_ibfk_1")
  board_store board_store[]
  comments    comments[]
  pin_store   pin_store[]

  @@index([user_id], map: "user_id")
}

model recent_search {
  id         Int      @id @default(autoincrement())
  user_id    Int
  keyword    String   @db.VarChar(300)
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "recent_search_ibfk_1")

  @@index([user_id], map: "user_id")
}

model social_login {
  access_token String @id @db.VarChar(128)
  user_id      Int
  users        users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "social_login_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  id                                       Int             @id @default(autoincrement())
  email                                    String          @unique(map: "email") @db.VarChar(300)
  nickname                                 String          @unique(map: "nickname") @db.VarChar(100)
  name                                     String          @db.VarChar(100)
  intro                                    String?         @db.Text
  profile_image                            String?         @db.VarChar(3000)
  created_at                               DateTime        @default(now()) @db.Timestamp(0)
  updated_at                               DateTime        @default(now()) @db.Timestamp(0)
  password                                 String          @db.VarChar(200)
  boards                                   boards[]
  comment_like                             comment_like[]
  comments                                 comments[]
  followings_followings_followee_idTousers followings[]    @relation("followings_followee_idTousers")
  followings_followings_follower_idTousers followings[]    @relation("followings_follower_idTousers")
  pin_store                                pin_store[]
  pins                                     pins[]
  recent_search                            recent_search[]
  social_login                             social_login[]
}
